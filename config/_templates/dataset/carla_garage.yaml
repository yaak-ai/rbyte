#@yaml/text-templated-strings

#@ drives = [
#@     'DynamicObjectCrossing/Town12_Rep0_3201_0_route0_11_08_02_22_17'
#@ ]

#@ cameras = [
#@     'rgb',
#@ ]
---
_target_: rbyte.Dataset
_recursive_: false
_convert_: all
sources:
  #@ for input_id in drives:
  (@=input_id@):
    #@ for source_id in cameras:
    (@=source_id@):
      index_column: meta/_idx_
      source:
        _target_: rbyte.io.PathTensorSource
        path: "${data_dir}/(@=input_id@)/(@=source_id@)/{:04d}.jpg"
        decoder:
          _target_: simplejpeg.decode_jpeg
          _partial_: true
          colorspace: rgb
          fastdct: true
          fastupsample: true

    #@ end
  #@ end

samples:
  inputs:
    #@ for input_id in drives:
    (@=input_id@):
      measurements_path: ${data_dir}/(@=input_id@)/measurements.json
      waypoints_path: ${data_dir}/(@=input_id@)/waypoints.json
    #@ end

  executor:
    _target_: concurrent.futures.ThreadPoolExecutor

  storage: dict
  pipeline:
    _target_: pipefunc.Pipeline
    validate_type_annotations: false
    functions:
      - _target_: pipefunc.PipeFunc
        renames:
          path: measurements_path
        output_name: records
        output_picker:
          _target_: hydra.utils.get_method
          path: builtins.dict.get
        mapspec: "measurements_path[i] -> records[i]"
        func:
          _target_: rbyte.io.JsonDataFrameBuilder
          fields:
            records:
              speed:
              steer:
              throttle:
              brake:
                _target_: polars.Float32 # in data it's just 0 and 1
              pos_global:

      - _target_: pipefunc.PipeFunc
        renames:
          input: records
        output_name: records_converted
        mapspec: "records[i] -> records_converted[i]"
        func:
          _target_: rbyte.io.DataFrameQuery
          query: |
            SELECT
              speed,
              steer,
              throttle,
              brake,
              array_get(pos_global, 2) as pos_global_x,
              array_get(pos_global, 1) as pos_global_y
            FROM self

      - _target_: pipefunc.PipeFunc
        renames:
          input: records_converted
        output_name: meta
        mapspec: "records_converted[i] -> meta[i]"
        func:
          _target_: rbyte.io.DataFrameIndexer
          name: _idx_
          dtype:
            _target_: polars.Int32

      - _target_: pipefunc.PipeFunc
        renames:
          path: waypoints_path
        output_name: features
        mapspec: "waypoints_path[i] -> features[i]"
        func:
          _target_: rbyte.io.GeoDataFrameBuilder
          srid: 0
          columns: [heading, timestamp, geometry]

      - _target_: pipefunc.PipeFunc
        renames:
          input: features
        output_name: features_converted
        mapspec: "features[i] -> features_converted[i]"
        func:
          _target_: rbyte.io.DataFrameQuery
          query: |
            SELECT * FROM self ORDER BY timestamp

      - _target_: pipefunc.PipeFunc
        renames:
          input: features_converted
        output_name: waypoints
        mapspec: "features_converted[i] -> waypoints[i]"
        func:
          _target_: rbyte.io.WaypointBuilder
          length: 10
          columns:
            points: geometry
            output: waypoints

      - _target_: pipefunc.PipeFunc
        output_name: data
        mapspec: "meta[i], waypoints[i] -> data[i]"
        func:
          _target_: pipefunc.helpers.collect_kwargs
          parameters: [meta, waypoints]
          function_name: aggregate

      - _target_: pipefunc.PipeFunc
        renames:
          input: data
        output_name: aligned
        mapspec: "data[i] -> aligned[i]"
        func:
          _target_: rbyte.io.DataFrameAligner
          separator: /
          fields:
            meta:
              key: _idx_
              columns:
                records.speed:
                  method: interp
                records.steer:
                  method: interp
                records.throttle:
                  method: interp
                records.brake:
                  method: interp
                records.pos_global:
                  method: asof
                  strategy: nearest

            waypoints:
              key: timestamp
              columns:
                heading:
                  method: asof
                  strategy: nearest
                waypoints:
                  method: asof

      - _target_: pipefunc.PipeFunc
        renames:
          input: aligned
        output_name: with_waypoints_normalized
        mapspec: "aligned[i] -> with_waypoints_normalized[i]"
        func:
          _target_: rbyte.io.WaypointNormalizer
          srid: 0
          columns:
            ego: [meta/pos_global_x, meta/pos_global_y]
            waypoints: waypoints/waypoints
            heading: waypoints/heading
            output: waypoints/waypoints_normalized

      - _target_: pipefunc.PipeFunc
        renames:
          input: with_waypoints_normalized
        output_name: filtered
        mapspec: "with_waypoints_normalized[i] -> filtered[i]"
        func:
          _target_: rbyte.io.DataFrameFilter
          predicate: |
            `meta/_idx_` between 115 and 135
