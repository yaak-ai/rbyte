#@yaml/text-templated-strings

#@ drives = [
#@     'DynamicObjectCrossing/Town12_Rep0_3201_0_route0_11_08_02_22_17'
#@ ]

#@ cameras = [
#@     'rgb',
#@ ]
---
_target_: rbyte.Dataset
_recursive_: false
_convert_: all
sources:
  #@ for input_id in drives:
  (@=input_id@):
    #@ for source_id in cameras:
    (@=source_id@):
      index_column: measurements/_idx_
      source:
        _target_: rbyte.io.PathTensorSource
        path: "${data_dir}/(@=input_id@)/(@=source_id@)/{:04d}.jpg"
        decoder:
          _target_: simplejpeg.decode_jpeg
          _partial_: true
          colorspace: rgb
          fastdct: true
          fastupsample: true

    #@ end
  #@ end

samples:
  inputs:
    #@ for input_id in drives:
    (@=input_id@):
      measurements_path: ${data_dir}/(@=input_id@)/measurements.json
      waypoints_path: ${data_dir}/(@=input_id@)/waypoints.json
    #@ end

  parallel: false
  pipeline:
    _target_: pipefunc.Pipeline
    validate_type_annotations: false
    functions:
      - _target_: pipefunc.PipeFunc
        renames:
          path: measurements_path
        output_name: measurements
        mapspec: "measurements_path[i] -> measurements[i]"
        func:
          _target_: rbyte.io.DuckDbDataFrameBuilder
        bound:
          query: |
            LOAD spatial;
            SELECT (row_number() OVER () - 1) as _idx_,
                   speed,
                   steer,
                   throttle,
                   brake::DOUBLE AS brake,
                   ST_AsWKB(ST_Point(pos_global[2], pos_global[1])) AS pos_global
            FROM (SELECT unnest(records, recursive := true)
                  FROM read_json('{path}')
            )

      - _target_: pipefunc.PipeFunc
        renames:
          path: waypoints_path
        output_name: waypoints_raw
        mapspec: "waypoints_path[i] -> waypoints_raw[i]"
        func:
          _target_: rbyte.io.DuckDbDataFrameBuilder
        bound:
          query: |
            LOAD spatial;
            SELECT timestamp, heading, ST_AsWKB(geom) AS geometry
            FROM ST_Read('{path}')
            ORDER BY timestamp

      - _target_: pipefunc.PipeFunc
        renames:
          input: waypoints_raw
        output_name: waypoints
        mapspec: "waypoints_raw[i] -> waypoints[i]"
        func:
          _target_: rbyte.io.WaypointBuilder
          length: 10
          columns:
            points: geometry
            output: waypoints

      - _target_: pipefunc.PipeFunc
        output_name: data
        mapspec: "measurements[i], waypoints[i] -> data[i]"
        func:
          _target_: pipefunc.helpers.collect_kwargs
          parameters: [measurements, waypoints]
          function_name: aggregate

      - _target_: pipefunc.PipeFunc
        renames:
          input: data
        output_name: aligned
        mapspec: "data[i] -> aligned[i]"
        func:
          _target_: rbyte.io.DataFrameAligner
          separator: /
          fields:
            measurements:
              key: _idx_
              columns:
                speed:
                  method: interp
                steer:
                  method: interp
                throttle:
                  method: interp
                brake:
                  method: interp
                pos_global:
                  method: asof
                  strategy: nearest

            waypoints:
              key: timestamp
              columns:
                heading:
                  method: asof
                  strategy: nearest
                waypoints:
                  method: asof

      - _target_: pipefunc.PipeFunc
        renames:
          input: aligned
        output_name: with_waypoints_normalized
        mapspec: "aligned[i] -> with_waypoints_normalized[i]"
        func:
          _target_: rbyte.io.WaypointNormalizer
          columns:
            ego: measurements/pos_global
            waypoints: waypoints/waypoints
            heading: waypoints/heading
            output: waypoints/waypoints_normalized

      - _target_: pipefunc.PipeFunc
        renames:
          self: with_waypoints_normalized
        output_name: filtered
        mapspec: "with_waypoints_normalized[i] -> filtered[i]"
        func:
          _target_: hydra.utils.get_method
          path: polars.DataFrame.sql
        bound:
          query: |
            SELECT * EXCLUDE `measurements/pos_global` FROM self WHERE COLUMNS(*) IS NOT NULL AND `measurements/_idx_` BETWEEN 115 AND 135
