#@yaml/text-templated-strings

#@ drives = [
#@     'Niro104-HQ/2023-03-15--10-02-09',
#@ ]

#@ cameras = [
#@     'cam_front_left',
#@     'cam_left_forward',
#@     'cam_right_forward',
#@ ]
---
_target_: rbyte.Dataset
_recursive_: false
_convert_: all
sources:
  #@ for input_id in drives:
  (@=input_id@):
    #@ for camera in cameras:
    (@=camera@):
      index_column: "ImageMetadata.(@=camera@).frame_idx"
      source:
        _target_: rbyte.io.PathTensorSource
        path: "${data_dir}/(@=input_id@)/frames/(@=camera@).defish.mp4/576x324/{:09d}.jpg"
        decoder:
          _target_: simplejpeg.decode_jpeg
          _partial_: true
          colorspace: rgb
          fastdct: true
          fastupsample: true
    #@ end
  #@ end

samples:
  inputs:
    #@ for input_id in drives:
    (@=input_id@):
      yaak_metadata_path: ${data_dir}/(@=input_id@)/metadata.log
      yaak_waypoints_path: ${data_dir}/(@=input_id@)/waypoints.json
      #@ for camera in cameras:
      (@=camera@)_path: ${data_dir}/(@=input_id@)/frames/(@=camera@).defish.mp4/576x324
      #@ end
    #@ end

  executor:
    _target_: concurrent.futures.ProcessPoolExecutor
    mp_context:
      _target_: multiprocessing.get_context
      method: forkserver

  storage: shared_memory_dict
  scheduling_strategy: eager
  persist_memory: false

  pipeline:
    _target_: pipefunc.Pipeline
    validate_type_annotations: false
    functions:
      - _target_: pipefunc.PipeFunc
        renames:
          path: yaak_metadata_path
        output_name: data
        mapspec: "yaak_metadata_path[i] -> data[i]"
        func:
          _target_: rbyte.io.YaakMetadataDataFrameBuilder
          fields:
            rbyte.io.yaak.proto.sensor_pb2.ImageMetadata:
              time_stamp:
                _target_: polars.Datetime
                time_unit: ns

              frame_idx:
                _target_: polars.Int32

              camera_name:
                _target_: polars.Enum
                categories:
                  - cam_front_center
                  - cam_front_left
                  - cam_front_right
                  - cam_left_forward
                  - cam_right_forward
                  - cam_left_backward
                  - cam_right_backward
                  - cam_rear

            rbyte.io.yaak.proto.can_pb2.VehicleState:
              time_stamp:
                _target_: polars.Datetime
                time_unit: ns

              turn_signal:
                _target_: polars.Int8

            rbyte.io.yaak.proto.can_pb2.VehicleMotion:
              time_stamp:
                _target_: polars.Datetime
                time_unit: ns

              speed:
                _target_: polars.Float32

              gas_pedal_normalized:
                _target_: polars.Float32

              brake_pedal_normalized:
                _target_: polars.Float32

              steering_angle_normalized:
                _target_: polars.Float32

              gear:
                _target_: polars.Enum
                categories: ["0", "1", "2", "3"]
            rbyte.io.yaak.proto.sensor_pb2.Gnss:
              time_stamp:
                _target_: polars.Datetime
                time_unit: ns
              latitude:
                _target_: polars.Float32
              longitude:
                _target_: polars.Float32


      - _target_: pipefunc.PipeFunc
        renames:
          input: data
        output_name: aligned
        mapspec: "data[i] -> aligned[i]"
        func:
          _target_: rbyte.io.DataFrameAligner
          separator: .
          fields:
            ImageMetadata.(@=cameras[0]@):
              key: time_stamp

            #@ for camera in cameras[1:]:
            ImageMetadata.(@=camera@):
              key: time_stamp
              columns:
                frame_idx:
                  method: asof
                  tolerance: 10ms
                  strategy: nearest
            #@ end

            VehicleState:
              key: time_stamp
              columns:
                turn_signal:
                  method: asof
                  tolerance: 100ms

            Gnss:
              key: time_stamp
              columns:
                latitude:
                  method: interp
                longitude:
                  method: interp

            VehicleMotion:
              key: time_stamp
              columns:
                speed:
                  method: interp
                gas_pedal_normalized:
                  method: interp
                brake_pedal_normalized:
                  method: interp
                steering_angle_normalized:
                  method: interp
                gear:
                  method: asof
                  tolerance: 100ms
                  strategy: nearest

      - _target_: pipefunc.PipeFunc
        renames:
          input: aligned
        output_name: columns_concated
        mapspec: "aligned[i] -> columns_concated[i]"
        func:
          _target_: rbyte.io.DataFrameColumnsConcater
          columns_in: ["Gnss.latitude", "Gnss.longitude"]
          col_out: "Gnss.lat_lon"

      - _target_: pipefunc.PipeFunc
        renames:
          input: columns_concated
        output_name: vehicle_data
        mapspec: "columns_concated[i] -> vehicle_data[i]"
        func:
          _target_: rbyte.io.DataFrameCoordinatesTransform
          col_coords: "Gnss.lat_lon"
          format_coords: "lat_lon"
          col_out_xy: "Gnss.xy"

      - _target_: pipefunc.PipeFunc
        renames:
          path: yaak_waypoints_path
        output_name: data_waypoints
        mapspec: "yaak_waypoints_path[i] -> data_waypoints[i]"
        func:
          _target_: rbyte.io.JsonDataFrameBuilder
          fields:
            features:
              properties.timestamp:
              properties.heading:
              geometry.coordinates: 
                _target_: polars.Array
                inner: 
                  _target_: polars.Float64
                shape: 2

      - _target_: pipefunc.PipeFunc
        renames:
          input: data_waypoints
        output_name: waypoints
        mapspec: "data_waypoints[i] -> waypoints[i]"
        func:
          _target_: rbyte.io.DataFrameConcater
          method: vertical
      
      - _target_: pipefunc.PipeFunc
        renames:
          input: waypoints
        output_name: waypoints_transformed
        mapspec: "waypoints[i] -> waypoints_transformed[i]"
        func:
          _target_: rbyte.io.DataFrameCoordinatesTransform
          col_coords: "geometry.coordinates"
          format_coords: "lon_lat"
          col_out_xy: "geometry.xy"
          
      - _target_: pipefunc.PipeFunc
        renames:
          input: waypoints_transformed
        output_name: waypoints_preprocessed
        mapspec: "waypoints_transformed[i] -> waypoints_preprocessed[i]"
        func:
          _target_: rbyte.io.YaakWaypointsPreprocessor
          n_wpts: 10
          coords_col: "geometry.xy"
          heading_col: "properties.heading"
          timestamp_col: "properties.timestamp"
          waypoints_col: "waypoints.xy"
            
      - _target_: pipefunc.PipeFunc
        renames:
          left: vehicle_data
          right: waypoints_preprocessed
        output_name: with_waypoints
        mapspec: "vehicle_data[i], waypoints_preprocessed[i] -> with_waypoints[i]"
        func:
          _target_: rbyte.io.DataFrameJoinerAsof
          strategy: nearest
          left_on: ImageMetadata.(@=cameras[0]@).time_stamp
          right_on: "properties.timestamp"
      
      - _target_: pipefunc.PipeFunc
        renames:
          input: with_waypoints
        output_name: waypoints_normalized
        mapspec: "with_waypoints[i] -> waypoints_normalized[i]"
        func:
          _target_: rbyte.io.WaypointsNormalizer
          ego_coords_col: "Gnss.xy"
          waypoints_coords_col: "waypoints.xy"
          heading_col: "properties.heading"
          out_col: "waypoints_normalized"
                  
      - _target_: pipefunc.PipeFunc
        renames:
          input: waypoints_normalized
        output_name: filtered
        mapspec: "waypoints_normalized[i] -> filtered[i]"
        func:
          _target_: rbyte.io.DataFrameFilter
          predicate: |
            `VehicleMotion.gear` == '3' 
            and `VehicleMotion.speed` between 0.0 and 130.0 
            and `VehicleMotion.gas_pedal_normalized` between 0.0 and 1.0 
            and `VehicleMotion.brake_pedal_normalized` between 0.0 and 1.0 
            and `VehicleMotion.steering_angle_normalized` between -1.0 and 1.0

      #@ for i, camera in enumerate(cameras):
      - _target_: pipefunc.PipeFunc
        renames:
          path: (@=camera@)_path
        output_name: (@=camera@)_meta
        mapspec: "(@=camera@)_path[i] -> (@=camera@)_meta[i]"
        cache: true
        func:
          _target_: rbyte.io.PathDataFrameBuilder
          pattern: (?<frame_idx>\d+).jpg
          fields:
            frame_idx:
              _target_: polars.Int32

      - _target_: pipefunc.PipeFunc
        #@ left = "filtered" if i == 0 else "joined_{}".format('_'.join(cameras[:i]))
        #@ right = "{}_meta".format(camera)
        #@ joined = "joined_{}".format('_'.join(cameras[:i+1]))
        renames:
          left: #@ left
          right: #@ right
        output_name: #@ joined
        mapspec: "(@=left@)[i], (@=right@)[i] -> (@=joined@)[i]"
        func:
          _target_: rbyte.io.DataFrameJoiner
          how: semi
          left_on: ImageMetadata.(@=camera@).frame_idx
          right_on: frame_idx
      #@ end

        
      - _target_: pipefunc.PipeFunc
        #@ input = "joined_{}".format('_'.join(cameras))
        renames:
          input: (@=input@)
        output_name: samples
        mapspec: "(@=input@)[i] -> samples[i]"
        func:
          _target_: rbyte.io.FixedWindowSampleBuilder
          index_column: ImageMetadata.(@=cameras[0]@).frame_idx
          every: 10i
          period: 50i
          closed: both
          gather_every: 10
          length: 6

      - _target_: pipefunc.PipeFunc
        renames:
          input: samples
        output_name: samples_filtered
        mapspec: "samples[i] -> samples_filtered[i]"
        func:
          _target_: rbyte.io.DataFrameFilter
          predicate: |
            not (
                  array_upper(`VehicleMotion.gas_pedal_normalized`) <= (1.0/255 + 0.001)
              and array_upper(`VehicleMotion.brake_pedal_normalized`) <= (1.0/164 + 0.001)
              and array_upper(`VehicleMotion.speed`) >= 25.0
              and array_get(`VehicleMotion.speed`, -1) - array_get(`VehicleMotion.speed`, 1) >= -0.05 * array_mean(`VehicleMotion.speed`)
            )